<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Zeneffy : journal de bord</title>
    <link>http://www.zeneffy.fr/post/</link>
    <description>Recent content in Posts on Zeneffy : journal de bord</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    
    
    
    <lastBuildDate>Thu, 16 Apr 2015 22:06:42 CEST</lastBuildDate>
    <atom:link href="http://www.zeneffy.fr/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mon datacenter</title>
      <link>http://www.zeneffy.fr/2015/04/mon-datacenter/</link>
      <pubDate>Thu, 16 Apr 2015 22:06:42 CEST</pubDate>
      
      <guid>http://www.zeneffy.fr/2015/04/mon-datacenter/</guid>
      <description>

&lt;h4 id=&#34;le-datacenter-à-la-maison-un-rêve-de-geek:ea04fef0779b2df1cb264c6e16c063f6&#34;&gt;le datacenter à la maison : un rêve de geek&lt;/h4&gt;

&lt;p&gt;Ayant acheté une maison l’année dernière avec beaucoup d’espace et surtout un grand garage, j’en ai profité pour réaliser un vieux fantasme de geek : Avoir un endroit dédié pour mon matériel informatique…bref mon propre mini datacenter.&lt;/p&gt;

&lt;p&gt;Derrière ce fantasme, un besoin simple: créer un espace protégé, ventilé et &lt;a href=&#34;http://fr.wikipedia.org/wiki/Facteur_d%27acceptation_f%C3%A9minine&#34;&gt;présentable&lt;/a&gt; pour héberger un NAS Synology, un  mini-serveur NUC, un antenne RFXCom pour la domotique, un hub NetGear et un UPS APC - le tout avec des capacités d’évolution et en respectant certaines règles d’urbanisation. En bonus, un vieux PC avec hauts-parleurs est installé pour me permettre d’écouter de la musique en bricolant ou pour consulter rapidement des infos domotiques.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8708/16972064590_a4f1719aec_z.jpg&#34; width=&#34;640&#34; height=&#34;478&#34; alt=&#34;datacenter1&#34; align=&#34;middle&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;de-la-récup-et-de-l-huile-de-coude:ea04fef0779b2df1cb264c6e16c063f6&#34;&gt;De la « récup » et de l’huile de coude&lt;/h4&gt;

&lt;p&gt;Après quelques recherches sur internet sur le sujet, j’ai trouvé de nombreux exemples de bricoleurs geek qui ont transformé (ou même créer) des meubles pour cette usage: j’ai donc décidé de me lancer moi aussi en partant d’un petit meuble existant.&lt;/p&gt;

&lt;p&gt;Quatre étapes majeures ont composé la création de ce meuble datacenter:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Créer les aérations et prévoir les circulations d’air&lt;/li&gt;
&lt;li&gt;Structurer le câblage des courants forts (électricité) et faibles (réseau)&lt;/li&gt;
&lt;li&gt;Mettre en place le matériel&lt;/li&gt;
&lt;li&gt;Installer le PC « domotique »&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;une-aération-intelligente:ea04fef0779b2df1cb264c6e16c063f6&#34;&gt;Une aération intelligente&lt;/h4&gt;

&lt;p&gt;Tout d’abord, j’ai percé des ouvertures sur la porte avant, sur l’arrière pour le passage des câbles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8732/16539846743_53e48f0cb9_n.jpg&#34; width=&#34;320&#34; height=&#34;239&#34; alt=&#34;IMG_0786&#34;&gt;
&lt;img src=&#34;https://farm8.staticflickr.com/7710/17159850705_0d20c08d1b_n.jpg&#34; width=&#34;239&#34; height=&#34;320&#34; alt=&#34;IMG_0812&#34;&gt;&lt;/p&gt;

&lt;p&gt;Puis j’ai rajouté une VMC de salle de bain pour assurer extraction d’air optimale, avec un allumage automatique via un &lt;a href=&#34;http://www.amazon.fr/Myfox-TA3010-62592-Module-1000/dp/B0033ZREXU/ref=pd_sim_hi_1?ie=UTF8&amp;amp;refRID=1R4NH6AP9KE53T4K6F7K&#34;&gt;micro-module Chacon&lt;/a&gt; commandé par la box domotique opensource &lt;a href=&#34;http://domoticz.com/&#34;&gt;Domoticz&lt;/a&gt; et basé sur un capteur de température &lt;a href=&#34;http://www.amazon.fr/Oregon-Scientific-THN-D%C3%A9tecteur-temp%C3%A9rature/dp/B000PEDJVI&#34;&gt;Oregon Scientific&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7637/16972282098_f363ed97bb_z.jpg&#34; width=&#34;640&#34; height=&#34;478&#34; alt=&#34;IMG_0818&#34;&gt;&lt;/p&gt;

&lt;p&gt;Grâce à ce montage, la VMC ne se déclenche que si la température à l’intérieur du DC dépasse les 30°C et s’éteint une fois la température revenue sous les 27°C, tout en m’envoyant des alertes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8701/16539781163_9c69f57da3_c.jpg&#34; width=&#34;800&#34; height=&#34;221&#34; alt=&#34;Domoticz&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;l-importance-d-optimiser-son-câblage:ea04fef0779b2df1cb264c6e16c063f6&#34;&gt;L’importance d’optimiser son câblage&lt;/h4&gt;

&lt;p&gt;Qui n’a jamais eu de problème de câble qui se mélangent, s’entortillent et se croisent (regardez donc les câbles entre votre télévision, votre box tv et votre lecteur de DVD par exemple!)? Sur un environnement confiné avec à la fois des câbles électriques et des câbles réseau, cela peut devenir l’enfer en cas de modification ou de dépannage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8765/17159460861_efc4b76ef2_z.jpg&#34; width=&#34;640&#34; height=&#34;478&#34; alt=&#34;IMG_0817&#34;&gt;&lt;/p&gt;

&lt;p&gt;Aussi j’ai utilisé des accroches de tuyaux de plomberie pour définir des chemins de câbles, en séparant courant faible et courant fort - ce qui m’a permis notamment de changer plusieurs fois des éléments dans le datacenter sans coup férir.&lt;/p&gt;

&lt;h4 id=&#34;organisation-et-remplissage-du-datacenter:ea04fef0779b2df1cb264c6e16c063f6&#34;&gt;Organisation et remplissage du datacenter&lt;/h4&gt;

&lt;p&gt;Avant de remplir, j’ai rajouté des roulettes pour faciliter les manipulations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7612/17160121785_315be2a776_z.jpg&#34; width=&#34;640&#34; height=&#34;478&#34; alt=&#34;IMG_0785&#34;&gt;&lt;/p&gt;

&lt;p&gt;Puis, J&amp;rsquo;ai positionné l&amp;rsquo;UPS en bas, le NUC au milieu avec le NAS et pour l&amp;rsquo;instant juste le switch réseau en haut: l&amp;rsquo;idée étant de garder de la place à côté du NUC et du switch pour des évolutions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7703/16550162503_48d1435116_z.jpg&#34; width=&#34;478&#34; height=&#34;640&#34; alt=&#34;IMG_0001&#34;&gt;&lt;/p&gt;

&lt;p&gt;Vous noterez le capteur de température pour le déclenchement de la VMC juste au dessus du NUC.&lt;/p&gt;

&lt;h4 id=&#34;un-pc-facile-d-accès:ea04fef0779b2df1cb264c6e16c063f6&#34;&gt;Un PC facile d’accès&lt;/h4&gt;

&lt;p&gt;Avoir un PC dans le garage/atelier peut être pratique pour accéder rapidement à un terminal, vérifier des points sur internet lors du bricolage ou simplement écouter de la musique.&lt;/p&gt;

&lt;p&gt;Pour cela, un peu de récupération avec une planche pour le moniteur et une plaque de métal pour le clavier, le tout fixé au mur au dessus du datacenter pour avoir le réseau et le tour est joué !&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7701/16547925704_5a723568a9_z.jpg&#34; width=&#34;478&#34; height=&#34;640&#34; alt=&#34;IMG_0002&#34;&gt;&lt;/p&gt;

&lt;p&gt;Ce système permet aussi de positionner le boîtier radio RFXcom en dehors du meuble pour éviter les interférences.&lt;/p&gt;

&lt;h4 id=&#34;résultats:ea04fef0779b2df1cb264c6e16c063f6&#34;&gt;Résultats&lt;/h4&gt;

&lt;p&gt;Les objectifs sont tous atteints, avec finalement peu de moyens engagés (moins de 80€ de matériel) et un résultat très correct.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7613/16984219739_fbf422e7f9_z.jpg&#34; width=&#34;478&#34; height=&#34;640&#34; alt=&#34;IMG_0003&#34;&gt;&lt;/p&gt;

&lt;p&gt;Je réfléchis maintenant à acheter un mini-PC pas cher pour remplacer le vieux Celeron 1Go qui peine même sous linux.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Obiran versus synology</title>
      <link>http://www.zeneffy.fr/2015/04/obiran-vs-synology/</link>
      <pubDate>Sat, 04 Apr 2015 20:17:05 &#43;0100</pubDate>
      
      <guid>http://www.zeneffy.fr/2015/04/obiran-vs-synology/</guid>
      <description>&lt;p&gt;Depuis quelques mois, j’ai mis en oeuvre une nouvelle infrastructure chez moi de type &lt;a href=&#34;http://techhead.co/vmware-esxi-home-lab-why-what-and-how-considerations-when-building-your-own-home-lab/&#34;&gt;homelab&lt;/a&gt;, basée sur un petit serveur intel NUC, ESXi et Ubuntu.&lt;/p&gt;

&lt;p&gt;Comme tout bon exploitant avec des tendances &lt;a href=&#34;http://www.zeneffy.fr/tags/devops&#34;&gt;devops&lt;/a&gt;, j’ai rajouté de la supervision avec &lt;a href=&#34;http://newrelic.com/server-monitoring&#34;&gt;NewRelic&lt;/a&gt;, divers scripts de contrôle, un dashboard basé sur &lt;a href=&#34;http://dashing.io/&#34;&gt;dashing&lt;/a&gt;, l’installation automatisée de VM via &lt;a href=&#34;http://www.ansible.com/home&#34;&gt;ansible&lt;/a&gt; et évidemment je me suis ensuite attaqué à la problématique des sauvegardes.&lt;/p&gt;

&lt;p&gt;De nombreuses solutions opensource existent déjà (&lt;a href=&#34;http://www.amanda.org/&#34;&gt;amanda&lt;/a&gt;, &lt;a href=&#34;http://www.baculasystems.com/&#34;&gt;bacula&lt;/a&gt; …) permettant entre autre d’avoir une architecture de type client-serveur. Toutefois, la sauvegarde étant un sujet qui me tient à &lt;a href=&#34;http://www.zeneffy.fr/tags/backup/&#34;&gt;coeur&lt;/a&gt;, j’ai décidé de réutiliser un de mes scripts assez ancien « &lt;a href=&#34;http://www.zeneffy.fr/2008/05/obiran-outil-de-backup-incremental-en-ruby/&#34;&gt;obiran&lt;/a&gt; » pour sauvegarder les fichiers importants directement sur mon NAS Synology.&lt;/p&gt;

&lt;p&gt;Mais la mauvaise fée de l’informatique est intervenu d’un coup de baguette numérique rendant impossible de faire fonctionner &lt;code&gt;rsync&lt;/code&gt; entre mes VM et le NAS, avec un message d’erreur peu parlant du type &lt;code&gt;Permission denied, please try again.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Après quelques recherches, la solution semble être d’expliciter le chemin du binaire &lt;code&gt;rsync&lt;/code&gt; côté synology, avec le paramètre &lt;code&gt;—rsync-path=/usr/syno/bin/rsync&lt;/code&gt;. La commande à lancer devient donc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rsync -azv —rsync-path=/usr/syno/bin/rsync REPERTOIRE_A_SAUVEGARDER -e « ssh -p PORT -i FICHIER-CLEF » USER@SYNOLOGY:REPERTOIRE_DESTINATION
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;J’ai donc mis à jour Obiran avec un nouveau paramètre pour prendre en compte cette spécificité: Obiran est donc passé en version 0.6, sept ans avec la version 0.5 !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Labs.zeneffy.fr change de crémerie</title>
      <link>http://www.zeneffy.fr/2012/10/labs-zeneffy-fr-change-de-cremerie/</link>
      <pubDate>Sun, 28 Oct 2012 18:49:04 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2012/10/labs-zeneffy-fr-change-de-cremerie/</guid>
      <description>&lt;p&gt;Suite à l&amp;rsquo;arrêt de la stack &amp;ldquo;aspen&amp;rdquo; sur &lt;a href=&#34;http://www.heroku.com&#34;&gt;Heroku.com&lt;/a&gt; sur laquelle tournait originellement le site &lt;a href=&#34;http://labs.zeneffy.fr&#34;&gt;labs.zeneffy.fr&lt;/a&gt; (basé sur le CMS ruby on rails &lt;a href=&#34;http://radiantcms.org/&#34;&gt;RadiantCMS&lt;/a&gt;), j&amp;rsquo;ai été obligé de chercher une solution : migration simple vers une stack plus récente ou changement complet de CMS.&lt;/p&gt;

&lt;p&gt;Finalement, j&amp;rsquo;ai simplifié à l&amp;rsquo;extrème en utilisant &lt;a href=&#34;http://pages.github.com/&#34;&gt;github pages&lt;/a&gt; avec un site complètement statique et se résumant à une page.&lt;/p&gt;

&lt;p&gt;Comme quoi les CMS et les bases de données ne sont pas la solution à tous les problèmes !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Le motto de l&#39;exploitant</title>
      <link>http://www.zeneffy.fr/2012/09/le-motto-de-lexploitant/</link>
      <pubDate>Sun, 02 Sep 2012 12:56:19 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2012/09/le-motto-de-lexploitant/</guid>
      <description>&lt;p&gt;En lisant le très bon article &lt;a href=&#34;http://agiletesting.blogspot.co.uk/2012/08/10-things-to-know-when-starting-out-as.html&#34;&gt;10 things to know when starting out as a sysadmin&lt;/a&gt;, j&amp;rsquo;ai retrouvé des points importants que tout exploitant doit connaître sur le bout des doigts à mon humble avis et d&amp;rsquo;après mes diverses (et parfois malheureuses) expériences:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sauvegarder est important, tester la restauration l&amp;rsquo;est tout autant.&lt;/li&gt;
&lt;li&gt;Tous les systèmes et applications en production doivent être supervisés, en adaptant le niveau de supervision à la criticité du système.&lt;/li&gt;
&lt;li&gt;L&amp;rsquo;exploitant doit être techniquement très compétent, notamment sur les protocoles réseau (http, DNS, routages&amp;hellip;) qui sont à la base du troubleshooting.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;L&amp;rsquo;exploitant est avant tout un expert de la gestion des problèmes qui sait analyser les anomalies en identifiant et éliminant les variables une à une jusqu&amp;rsquo;à trouver la rootcause.&lt;/li&gt;
&lt;li&gt;Redondance et résilience sont les amies de l&amp;rsquo;exploitant, qui n&amp;rsquo;oublie pas de les tester régulièrement&amp;hellip;il est toujours dommage de se rendre compte en plein incident que le backup ne fonctionne pas alors que le master est tombé&lt;/li&gt;
&lt;li&gt;Exploiter des machines, c&amp;rsquo;est maintenir la disponibilité &lt;strong&gt;et&lt;/strong&gt; la sécurité des applications: vos clients ne vous pardonneront jamais d&amp;rsquo;avoir égarer leurs données personnelles.&lt;/li&gt;
&lt;li&gt;Les logs sont et resteront l&amp;rsquo;outil de diagnostic principal de l&amp;rsquo;exploitant: cela nécessite d&amp;rsquo;une part une infrastructure pour les gérer correctement mais aussi un travail en amont avec les développeurs pour savoir ce qui doit être dans des logs ou pas!&lt;/li&gt;
&lt;li&gt;Savoir développer des outils est important pour industrialiser des actions de production ou pour trouver un &amp;ldquo;quick hack&amp;rdquo; afin de rétablir le service&amp;hellip;et ces outils sont presque toujours écrit en langage de script (python, ruby, bash, lua - choisissez votre préféré) que devra connaître voire masteriser l&amp;rsquo;exploitant.&lt;/li&gt;
&lt;li&gt;La documentation sauve la journée de l&amp;rsquo;exploitant (et permet accessoirement de rétablir le service): manuels d&amp;rsquo;exploitation, guides de troubleshooting, schémas de flux&amp;hellip;sont à construire, collecter et surtout stocker dans des bases de connaissance efficientes - les wikis sont souvent de parfaits candidats pour cela en rajoutant une dimension collaborative entre exploitants et développeurs.&lt;/li&gt;
&lt;li&gt;Bien que la réactivité soit la première qualité de l&amp;rsquo;exploitant, la proactivité est tout aussi importante, d&amp;rsquo;une part en amont des projets pour préparer l&amp;rsquo;exploitabilité des solutions avec architectes et développeurs et d&amp;rsquo;autre part en aval en analysant quotidiennement la performance des applications afin d&amp;rsquo;anticiper les dégradations.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dernier point et non des moindres: l&amp;rsquo;opensource permet à l&amp;rsquo;exploitant d&amp;rsquo;avoir une boîte à outils efficace et à moindre frais:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Déploiement (Puppet/Chef/Vagrant)&lt;/li&gt;
&lt;li&gt;Intégration et les tests (Selenium, Cucumber &amp;amp; Co)&lt;/li&gt;
&lt;li&gt;Sauvegarde (Amanda/Bacula)&lt;/li&gt;
&lt;li&gt;Supervision (Nagios, Centreon, Zabbix)&lt;/li&gt;
&lt;li&gt;Analyse de la performance (Cacti, Smokeping)&lt;/li&gt;
&lt;li&gt;Gestion des problèmes et des incidents (Bugzilla, Mantis, Trac)&lt;/li&gt;
&lt;li&gt;Documentation (MoinMoinwiki, MediaWiki).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ainsi pour chaque usage plusieurs alternatives libres existent et sont par ailleurs largement utilisées dans le monde de la production pour faciliter la vie de l&amp;rsquo;exploitant.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dans combien de jours ?</title>
      <link>http://www.zeneffy.fr/2012/07/dans-combien-de-jours/</link>
      <pubDate>Tue, 03 Jul 2012 13:07:41 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2012/07/dans-combien-de-jours/</guid>
      <description>&lt;p&gt;Mon fils compte très souvent les jours restants avant chaque événement (Mariages, entrée au CP, Vacances…) et chaque jour demande donc &lt;em&gt;&amp;ldquo;Dans combien de jours c&amp;rsquo;est xxx&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Autant compter sur 2 à 3 semaines reste faisable, autant quand il s&amp;rsquo;agit de compter les jours avant un événement dans 6 mois les choses se compliquent.&lt;/p&gt;

&lt;p&gt;Aussi en bon geek que je suis, j&amp;rsquo;ai rapidement prototypé une application sobrement intitulée &lt;a href=&#34;https://github.com/jraigneau/dcdj&#34;&gt;dcdj&lt;/a&gt; qui permet de rentrer un événement et d&amp;rsquo;avoir le nombre de jours restants.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;objectif étant d&amp;rsquo;avoir toujours sous la main l&amp;rsquo;application, l&amp;rsquo;utilisation des technologies mobiles était une évidence. Une petite revue rapide d&amp;rsquo;objective-C (ainsi que le prix de la licence AppStore!) m&amp;rsquo;ayant convaincue que finalement les technologies web restaient les plus adaptées, j&amp;rsquo;ai développé &lt;a href=&#34;https://github.com/jraigneau/dcdj&#34;&gt;dcdj&lt;/a&gt; avec le classique &lt;a href=&#34;http://rubyonrails.org&#34;&gt;Ruby on Rails&lt;/a&gt; et surtout &lt;a href=&#34;http://jquerymobile.com&#34;&gt;jQuery Mobile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Retrouver Rails après quelques mois de &lt;a href=&#34;http://nodejs.org&#34;&gt;node.js&lt;/a&gt; a été un vrai plaisir et j&amp;rsquo;ai surtout découvert que jQuery Mobile était une librairie très intéressante à utiliser pour créer rapidement des applications web lisibles sur des mobiles et tablettes.&lt;/p&gt;

&lt;p&gt;Le résultat peut-être testé sur &lt;a href=&#34;http://dcdj-test.herokuapp.com/&#34;&gt;dcdj-test&lt;/a&gt; et le code source est bien évidemment libre et disponible sur &lt;a href=&#34;https://github.com/jraigneau/dcdj&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Utiliser les versions 0.6.x de Nodejs sur Heroku</title>
      <link>http://www.zeneffy.fr/2012/01/utiliser-les-versions-0-6-x-de-nodejs-sur-heroku/</link>
      <pubDate>Sun, 22 Jan 2012 15:41:38 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2012/01/utiliser-les-versions-0-6-x-de-nodejs-sur-heroku/</guid>
      <description>&lt;p&gt;L&amp;rsquo;hébergeur &lt;a href=&#34;http://heroku.com&#34;&gt;heroku&lt;/a&gt; permet de mettre en place des applications &lt;a href=&#34;http://nodejs.org/&#34;&gt;nodejs&lt;/a&gt; depuis l&amp;rsquo;année dernière, toutefois par défaut la version est la 0.4.7 - version stable mais qui est devenue obsolète avec l&amp;rsquo;apparition des versions 0.6.x.&lt;/p&gt;

&lt;p&gt;Heureusement, il est possible très facilement de forcer la version - pour cela il suffit d&amp;rsquo;une part de rajouter un &amp;ldquo;buildpack&amp;rdquo; dans les variables d&amp;rsquo;environnement de votre application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku config:add BUILDPACK_URL=https://github.com/heroku/heroku-buildpack-nodejs.git#versions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;puis de modifier le fichier &lt;em&gt;packages.json&lt;/em&gt; pour rajouter une entrée &amp;ldquo;engines&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;monAppli&amp;quot;
  , &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;
  , &amp;quot;private&amp;quot;: true
  , &amp;quot;dependencies&amp;quot;: {
      &amp;quot;express&amp;quot;: &amp;quot;2.5.6&amp;quot;
    , &amp;quot;jade&amp;quot;: &amp;quot;0.20.0&amp;quot;
  },
  &amp;quot;engines&amp;quot;: {
    &amp;quot;node&amp;quot;: &amp;quot;0.6.x&amp;quot;,
    &amp;quot;npm&amp;quot;: &amp;quot;1.0.x&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis les classiques&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;passage en en 0.6&amp;quot;
git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Normalement vous devriez voir les lignes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----&amp;gt; Heroku receiving push
-----&amp;gt; Fetching custom buildpack... done
-----&amp;gt; Node.js app detected
-----&amp;gt; Resolving engine versions
       Using Node.js version: 0.6.8
       Using npm version: 1.0.106
-----&amp;gt; Fetching Node.js binaries
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et voilà, votre application tourne en 0.6.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Instant de bonheur: une application complète node.js</title>
      <link>http://www.zeneffy.fr/2011/12/instant-de-bonheur-une-application-complete-node-js/</link>
      <pubDate>Tue, 27 Dec 2011 12:08:26 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/12/instant-de-bonheur-une-application-complete-node-js/</guid>
      <description>&lt;p&gt;M&amp;rsquo;intéressant depuis quelques temps à &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt; (framework web basé sur le moteur javascript V8 de chrome), j&amp;rsquo;avais décidé de réaliser une petite application pour tester et me faire une opinion sur l&amp;rsquo;utilisation du javascript côté serveur - par un hasard extraordinaire j&amp;rsquo;ai eu l&amp;rsquo;occasion de trouver une idée et de la réaliser lors d&amp;rsquo;une formation, par ailleurs sans aucun rapport.&lt;/p&gt;

&lt;p&gt;Cela donne l&amp;rsquo;application web &lt;a href=&#34;http://mon.instant-de-bonheur.fr&#34;&gt;mon.instant-de-bonheur.fr&lt;/a&gt; qui permet de partager les petits (et grands!) moments de bonheur (sans aucun lien avec l&amp;rsquo;&lt;a href=&#34;http://programmes.france2.fr/leurs-secrets-du-bonheur/index.php?page=article&amp;amp;numsite=7085&amp;amp;id_article=24314&amp;amp;id_rubrique=7088&#34;&gt;émission de France2&lt;/a&gt;, quoique&amp;hellip;) et qui a été mise en ligne depuis quelques jours.&lt;/p&gt;

&lt;p&gt;Pour les geeks, j&amp;rsquo;ai pris soin (ou du moins essayé) de documenter mon code, évidemment publié en opensource (license Apache 2.0) afin que d&amp;rsquo;autres puissent peut-être en profiter pour monter en compétence sur les technologies javascript (node.js, jade, expressjs) et noSQL (à travers mongodb).&lt;/p&gt;

&lt;p&gt;Le code complet est disponible sur github via &lt;a href=&#34;https://github.com/jraigneau/instant&#34;&gt;github.com/jraigneau/instant&lt;/a&gt;, et la version commentée et mise en forme peut-être revue sur le site même de l&amp;rsquo;application via &lt;a href=&#34;http://mon.instant-de-bonheur.fr/about&#34;&gt;mon.instant-de-bonheur.fr/about&lt;/a&gt;. Le code est améliorable, modifiable et ne respecte probablement pas les standards mais &amp;ldquo;It works !&amp;rdquo; -  au passage je suis convaincu par l&amp;rsquo;utilisation de node.js: rapide, fiable et surtout très facile à utiliser pour un développeur même moyen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Démarrer avec Play! Framework, scala et MongoDB sur Heroku</title>
      <link>http://www.zeneffy.fr/2011/10/demarrer-avec-play-framework-scala-et-mongodb-sur-heroku/</link>
      <pubDate>Sun, 30 Oct 2011 09:37:51 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/10/demarrer-avec-play-framework-scala-et-mongodb-sur-heroku/</guid>
      <description>&lt;p&gt;J&amp;rsquo;ai découvert &lt;a href=&#34;http://www.playframework.org/&#34;&gt;Play! Framework&lt;/a&gt; il y a quelques mois avec beaucoup d&amp;rsquo;intérêt et je me suis rendu compte qu&amp;rsquo;un module &lt;a href=&#34;http://scala.playframework.org/&#34;&gt;scala&lt;/a&gt; existait. Voici donc un premier petit projet qui permet à la fois d&amp;rsquo;installer Play! (1.2.3) mais aussi d&amp;rsquo;utiliser MongoDB sur Heroku en quelques étapes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Suivant votre système, &lt;a href=&#34;http://www.playframework.org/download&#34;&gt;installez Play! via le zip&lt;/a&gt; ou via brew: &lt;code&gt;brew install play&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Installez le support java pour Play! &lt;code&gt;play install scala&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Créez l&amp;rsquo;application avec le support java: &lt;code&gt;play new maSuperDemo --with scala&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Testez que tout s&amp;rsquo;est bien passé: &lt;code&gt;play run&lt;/code&gt; puis ouvrez votre navigateur sur &lt;code&gt;http//localhost:9000&lt;/code&gt;. Normalement vous devez avoir une belle fenêtre résumant le fonctionnement de Play!. Passons maintenant au choses sérieuses.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Modifiez les dépendances du projet pour ajouter &lt;a href=&#34;http://api.mongodb.org/scala/casbah/2.1.5.0/index.html&#34;&gt;Casbah&lt;/a&gt;, la librairie Scala permettant de manipuler &lt;a href=&#34;mongodb&#34;&gt;MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Application dependencies
require:
    - play
    - play -&amp;gt; scala 0.9.1
    - com.mongodb.casbah -&amp;gt; casbah_2.8.1 2.1.5-1

repositories:
  - scalatools:
     type: iBiblio
     root: http://scala-tools.org/repo-releases/
     contains:
       - com.mongodb.casbah -&amp;gt; *
       - org.scalaj -&amp;gt; *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attention de bien utiliser la version 2.8.1 qui est la seule compatible avec Play! 1.2.3 à l&amp;rsquo;heure actuelle.&lt;/p&gt;

&lt;p&gt;Forcez Play! à charger toutes les dépendances (qui seront stockées dans le répertoire /lib):
    play dependencies&lt;/p&gt;

&lt;p&gt;Préparez l&amp;rsquo;application pour le déploiement sur heroku: pour des raisons de simplicité nous allons utiliser la base MongoDB de heroku directement (pas de base de développement&amp;hellip;c&amp;rsquo;est mal mais c&amp;rsquo;est une démo !).
Avant toute chose, créez un fichier &lt;code&gt;.gitignore&lt;/code&gt; contenant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/modules
/tmp
/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis la magie git habituelle&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;et enfin la déclaration sous heroku (je ne donne pas de nom à l&amp;rsquo;application, Heroku m&amp;rsquo;en choisira un tout seul) et l&amp;rsquo;installation de l&amp;rsquo;addon mongodb (ici via mongolab mais mongoHQ ferait aussi l&amp;rsquo;affaire)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku create --stack cedar
heroku addons:add mongolab:starter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Point important: la commande heroku config vous permettra de récupérer l&amp;rsquo;url et le port de la base mongoDB automatiquement créée. Exemple:
    &lt;code&gt;MONGOLAB_URI =&amp;gt; mongodb://nombase:motdepasse@urlmongolab:portmongolab/nombase&lt;/code&gt;
Ces données sont à intégrer dans la prochaine étape.&lt;/p&gt;

&lt;p&gt;Créez un nouveau controleur dans /app/controllers/Messages.scala avec le code suivant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package controllers;

import play.mvc._;
import com.mongodb.casbah.Imports._
import scala.collection.JavaConverters._

object Messages extends Controller {

//Création de la connexion et authentification
  val _mongoConn = MongoConnection(&amp;quot;urlmongolab&amp;quot;, portmongolab)
  _mongoConn(&amp;quot;nombase&amp;quot;).authenticate(&amp;quot;nombase&amp;quot;,&amp;quot;motdepasse&amp;quot;)


  def index = {
    val msgs = _mongoConn(&amp;quot;nombase&amp;quot;)(&amp;quot;test_data&amp;quot;).find( &amp;quot;msg&amp;quot; $exists true $ne &amp;quot;&amp;quot; )
    val msgStrings = msgs.map( (obj: DBObject) =&amp;gt; obj.getOrElse(&amp;quot;msg&amp;quot;,&amp;quot;&amp;quot;) )
    Template( &#39;msgStrings -&amp;gt; msgStrings.asJava )
  }

  def save(msg:String) = {
    val doc = MongoDBObject(&amp;quot;msg&amp;quot; -&amp;gt; msg)
    _mongoConn(&amp;quot;nombase&amp;quot;)(&amp;quot;test_data&amp;quot;).save( doc )
    Redirect(&amp;quot;/&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vous noterez les transformations des méthodes &amp;ldquo;.asJava&amp;rdquo; qui permettent à Groovy (le langage de scripting intégré dans Play) de gérer les listes typique de Scala.&lt;/p&gt;

&lt;p&gt;Ajoutez une vue pour gérer le controleur avec un fichier dans /app/views/Messages/index.html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;@{Messages.save()}&amp;quot; method=&amp;quot;POST&amp;quot;/&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;msg&amp;quot;/&amp;gt;
  &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Add message&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;ul&amp;gt;
  #{list items:msgStrings, as:&#39;mess&#39; }
  &amp;lt;li&amp;gt;${ mess }&amp;lt;/li&amp;gt;
  #{/list}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modifiez les routes dans /config/routes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                       Messages.index
POST    /                                       Messages.save


# Ignore favicon requests
GET     /favicon.ico                            404

# Map static resources from the /app/public folder to the /public path
GET     /public/                                staticDir:public

# Catch all
*       /{controller}/{action}                  {controller}.{action}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testez votre application en lançant la commande play run - normalement vous devriez être capable d&amp;rsquo;enregistrer des petites messages et de les voir apparaître à l&amp;rsquo;écran.&lt;/p&gt;

&lt;p&gt;Déployez votre application sur heroku et admirez la !&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;Premier commit&amp;quot;
git push heroku master
heroku open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ce petit tutoriel peut (doit) être complété avec le &lt;a href=&#34;http://scala.playframework.org/documentation/scala-0.9.1/home&#34;&gt;tutoriel officiel disponible sur le site de Play&lt;/a&gt;, en attendant vous pourrez jouer avec mon application sur &lt;a href=&#34;http://glowing-fog-2793.herokuapp.com/&#34;&gt;http://glowing-fog-2793.herokuapp.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tutoriel basé en partie sur &lt;a href=&#34;http://jaredrosoff.com/2011/05/getting-started-with-play-framework-scala-and-casbah/&#34;&gt;http://jaredrosoff.com/&lt;sup&gt;2011&lt;/sup&gt;&amp;frasl;&lt;sub&gt;05&lt;/sub&gt;/getting-started-with-play-framework-scala-and-casbah/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scala sur Heroku</title>
      <link>http://www.zeneffy.fr/2011/10/scala-sur-heroku/</link>
      <pubDate>Sat, 15 Oct 2011 08:21:18 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/10/scala-sur-heroku/</guid>
      <description>&lt;p&gt;En plein apprentissage de scala, j&amp;rsquo;ai décidé de m&amp;rsquo;intéresser au framework web &lt;a href=&#34;http://www.scalatra.org/&#34;&gt;Scalatra&lt;/a&gt; qui ressemble à &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt;, mon environnement favori en Ruby. Evidemment, je souhaite pouvoir partager rapidement mes &amp;lsquo;créations&amp;rsquo; en les hébergeant sur la plate-forme &lt;a href=&#34;http://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;, devenue &lt;a href=&#34;http://blog.heroku.com/archives/2011/8/3/polyglot_platform/&#34;&gt;polyglotte&lt;/a&gt; depuis quelques semaines en supportant d&amp;rsquo;autres langages que Ruby (notamment node.js, Java, Clojure, Scala et Python).&lt;/p&gt;

&lt;p&gt;Après quelques recherches sur internet, j&amp;rsquo;ai trouvé mon bonheur sur github &lt;a href=&#34;https://gist.github.com/1209277&#34;&gt;ici&lt;/a&gt; et &lt;a href=&#34;https://github.com/mikkelbd/scalatra-hello-heroku&#34;&gt;là&lt;/a&gt;. Pour gagner du temps dans mes futurs projets, j&amp;rsquo;ai alors transformé ces informations en un template &lt;a href=&#34;https://github.com/n8han/giter8&#34;&gt;giter8&lt;/a&gt;. Giter8 est un simple outil basé sur scala et &lt;a href=&#34;https://github.com/harrah/xsbt/wiki&#34;&gt;SBT&lt;/a&gt; qui installe des templates stockés sur Github.&lt;/p&gt;

&lt;p&gt;Une fois &lt;a href=&#34;https://github.com/n8han/giter8&#34;&gt;g8&lt;/a&gt; et le &lt;a href=&#34;http://devcenter.heroku.com/articles/git&#34;&gt;gem heroku&lt;/a&gt; installés, mettre en ligne un projet scalatra devient alors très simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g8 jraigneau/scalatra-sbt-heroku.g8
cd monProjet
git init
git add . (conseil: pensez à mettre les répertoires de compilation (target) dans votre fichier .gitignore avant...)
git commit -m &amp;quot;Premier commit&amp;quot;
heroku create monProjet --stack cedar
git push heroku master
heroku open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et voilà, votre navigateur s&amp;rsquo;ouvre sur la nouvelle application !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>En avant pour Scala avec Vim</title>
      <link>http://www.zeneffy.fr/2011/10/en-avant-pour-scala-avec-vim/</link>
      <pubDate>Sun, 02 Oct 2011 10:31:59 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/10/en-avant-pour-scala-avec-vim/</guid>
      <description>&lt;p&gt;Après quelques années de développement avec mes deux langages favoris &lt;a href=&#34;http://blog.zeneffy.fr/tag/python/&#34;&gt;Python&lt;/a&gt; et de &lt;a href=&#34;http://blog.zeneffy.fr/tag/ruby/&#34;&gt;Ruby&lt;/a&gt;, j&amp;rsquo;ai décidé de me lancer dans un nouveau langage basé sur la &lt;a href=&#34;http://fr.wikipedia.org/wiki/JVM_(informatique&#34;&gt;JVM&lt;/a&gt;) (donc pas de Java pur, j&amp;rsquo;ai déjà donné!). Après avoir étudié &lt;a href=&#34;http://clojure.org/&#34;&gt;Clojure&lt;/a&gt; et &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;, j&amp;rsquo;ai décidé de me concentrer sur Scala qui me semble plus naturel et qui mélange les paradigmes &amp;ldquo;Orienté-Objet&amp;rdquo; et &amp;ldquo;programmation fonctionnelle&amp;rdquo; - Clojure pour sa part est un &lt;a href=&#34;http://fr.wikipedia.org/wiki/Lisp&#34;&gt;lisp&lt;/a&gt; qui semble très puissant mais moins accessible pour un développeur moyen et dilettante comme moi.&lt;/p&gt;

&lt;p&gt;Mon premier réflexe a été bien évidemment de m&amp;rsquo;assurer que macVim me permettrait de facilement commencer quelques développement en Scala. En cherchant rapidement sur le web, j&amp;rsquo;ai pu trouvé quelques astuces pour la coloration, la navigation à travers les méthodes&amp;hellip;&lt;/p&gt;

&lt;p&gt;En premier lieu, il faut installer le plugin Scala pour vim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;svn export --force http://lampsvn.epfl.ch/svn-repos/scala/scala-tool-support/trunk/src/vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;puis copier les fichiers obtenus dans votre répertoire .vim&lt;/p&gt;

&lt;p&gt;Deuxième étape, l&amp;rsquo;installation du plugin &lt;a href=&#34;http://www.vim.org/scripts/script.php?script_id=3465&#34;&gt;Tagbar&lt;/a&gt; (téléchargement du fichier .vba puis méthode d&amp;rsquo;installation normale vim)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim tagbar.vba
  :so %
  :q
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TagBar ne prenant pas en compte Scala, il faut légèrement modifier certains fichiers
Tout d&amp;rsquo;abord, création dans votre $HOME du fichier .ctags suivant&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--langdef=Scala
--langmap=Scala:.scala
--regex-Scala=/^[ \t]*class[ \t]*([a-zA-Z0-9_]+)/\1/c,classes/
--regex-Scala=/^[ \t]*object[ \t]*([a-zA-Z0-9_]+)/\1/o,objects/
--regex-Scala=/^[ \t]*trait[ \t]*([a-zA-Z0-9_]+)/\1/t,traits/
--regex-Scala=/^[ \t]*case[ \t]*class[ \t]*([a-zA-Z0-9_]+)/\1/r,cclasses/
--regex-Scala=/^[ \t]*abstract[ \t]*class[ \t]*([a-zA-Z0-9_]+)/\1/a,aclasses/
--regex-Scala=/^[ \t]*def[ \t]*([a-zA-Z0-9_=]+)[ \t]*.*[:=]/\1/m,methods/
--regex-Scala=/[ \t]*val[ \t]*([a-zA-Z0-9_]+)[ \t]*[:=]/\1/V,values/
--regex-Scala=/[ \t]*var[ \t]*([a-zA-Z0-9_]+)[ \t]*[:=]/\1/v,variables/
--regex-Scala=/^[ \t]*type[ \t]*([a-zA-Z0-9_]+)[ \t]*[\[&amp;lt;&amp;gt;=]/\1/T,types/
--regex-Scala=/^[ \t]*import[ \t]*([a-zA-Z0-9_{}., \t=&amp;gt;]+$)/\1/i,includes/
--regex-Scala=/^[ \t]*package[ \t]*([a-zA-Z0-9_.]+$)/\1/p,packages/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis on va modifier le code du plugin TagBar (à priori dans &lt;code&gt;~/.vim/plugin/tagbar.vim&lt;/code&gt;), en rajoutant les lignes suivantes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; Scala {{{3
let type_scala = {}
let type_scala.ctagstype = &#39;Scala&#39;
let type_scala.kinds     = [
  \ {&#39;short&#39; : &#39;p&#39;, &#39;long&#39; : &#39;packages&#39;,  &#39;fold&#39; : 1 },
  \ {&#39;short&#39; : &#39;V&#39;, &#39;long&#39; : &#39;values&#39;,    &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;v&#39;, &#39;long&#39; : &#39;variables&#39;, &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;T&#39;, &#39;long&#39; : &#39;types&#39;,     &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;t&#39;, &#39;long&#39; : &#39;traits&#39;,    &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;o&#39;, &#39;long&#39; : &#39;objects&#39;,   &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;a&#39;, &#39;long&#39; : &#39;aclasses&#39;,  &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;c&#39;, &#39;long&#39; : &#39;classes&#39;,   &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;r&#39;, &#39;long&#39; : &#39;cclasses&#39;,  &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;m&#39;, &#39;long&#39; : &#39;methods&#39;,   &#39;fold&#39; : 0 }
\ ]
let type_scala.sro        = &#39;.&#39;
let type_scala.kind2scope = {
  \ &#39;T&#39; : &#39;type&#39;,
  \ &#39;t&#39; : &#39;trait&#39;,
  \ &#39;o&#39; : &#39;object&#39;,
  \ &#39;a&#39; : &#39;abstract class&#39;,
  \ &#39;c&#39; : &#39;class&#39;,
  \ &#39;r&#39; : &#39;case class&#39;
\ }
let type_scala.scope2kind = {
  \ &#39;type&#39;           : &#39;T&#39;,
  \ &#39;trait&#39;          : &#39;t&#39;,
  \ &#39;object&#39;         : &#39;o&#39;,
  \ &#39;abstract class&#39; : &#39;a&#39;,
  \ &#39;class&#39;          : &#39;c&#39;,
  \ &#39;case class&#39;     : &#39;r&#39;
\ }
let s:known_types.scala = type_scala
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attention, ces lignes doivent être rajoutées dans la fonction &lt;code&gt;_function! s:InitTypes()_&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Et voilà - Vim est prêt pour Scala !&lt;/p&gt;

&lt;p&gt;Tiré/traduit de &lt;a href=&#34;http://latestbuild.net/scala-ctags-and-vim-tagbar&#34;&gt;latestbuild.net/scala-ctags-and-vim-tagbar &lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sauvegarder une base de donnée PostgreSQL chez Heroku</title>
      <link>http://www.zeneffy.fr/2011/09/sauvegarder-une-base-de-donnee-postgresql-chez-heroku/</link>
      <pubDate>Mon, 19 Sep 2011 17:34:01 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/09/sauvegarder-une-base-de-donnee-postgresql-chez-heroku/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.heroku.com&#34;&gt;Heroku&lt;/a&gt; permet de faire très simplement des sauvegardes des bases de données de production en utilisant le module &lt;a href=&#34;http://addons.heroku.com/pgbackups&#34;&gt;PGBackups&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il faut d&amp;rsquo;abord installer le module soit via l&amp;rsquo;IHM web , soit via la commande ((dans le répertoire de l&amp;rsquo;application):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku addons:add pgbackups
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis simplement lancer une sauvegarde:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku pgbackups:capture
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une petite vérification s&amp;rsquo;impose:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku pgbackups
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;qui renvoie normalement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;D   | Backup Time         | Size   | Database
-----+---------------------+--------+----------------
b001 | 2011/08/18 11:08.22 | 39.2KB | SHARED_DATABASE
b002 | 2011/09/19 10:24.04 | 40.2KB | SHARED_DATABASE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et finalement pour restaurer (avec b001 la base):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku pgbackups:restore DATABASE b001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rappelez vous que la sauvegarde reste l&amp;rsquo;un des meilleurs moyens de sécuriser vos données.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MacVim, Command-T et RVM</title>
      <link>http://www.zeneffy.fr/2011/09/macvim-command-t-et-rvm/</link>
      <pubDate>Sun, 04 Sep 2011 18:55:28 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/09/macvim-command-t-et-rvm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/macvim/&#34;&gt;MacVim&lt;/a&gt; (une forme de l&amp;rsquo;éditeur VIM adaptée à MacOS) est mon éditeur de prédilection actuellement malgré de nombreux autres essais (entre autres: &lt;a href=&#34;http://macromates.com/&#34;&gt;Textmate&lt;/a&gt;, &lt;a href=&#34;http://kodapp.com/&#34;&gt;Kod&lt;/a&gt;, &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Il est très configurable et permet de rajouter de nombreuses fonctionnalités utiles: ici je vous parlerai du module &lt;a href=&#34;https://wincent.com/products/command-t&#34;&gt;Command-T&lt;/a&gt; qui permet de faire des recherches très fines et surtout pertinentes à travers les répertoires et fichiers d&amp;rsquo;un projet - un screencast est disponible &lt;a href=&#34;https://s3.amazonaws.com/s3.wincent.com/command-t/screencasts/command-t-demo.mov?width=640&amp;amp;height=480&#34;&gt;sur le site de l&amp;rsquo;auteur&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pour l&amp;rsquo;installer sur un mac avec RVM, il faut être vigilant sur la version de Ruby employée car MacVim ne compilant pas avec ruby 1.9.&lt;/p&gt;

&lt;p&gt;Installation de MacVim via &lt;a href=&#34;http://mxcl.github.com/homebrew/&#34;&gt;homebrew&lt;/a&gt; avec ruby 1.8.7:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm use system
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/gist/323731)&amp;quot;
brew install wget macvim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Installation de CommandT à partir de vim.org:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://www.vim.org/scripts/download_script.php?src_id=15560
mvim command-t-1.2.1.vba
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis une fois MacVim ouvert:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:so %
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En sortant de MacVim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /$HOME/.vim/ruby/command-t
ruby extconf.rb
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et voilà normalement tout fonctionne, vous pouvez utiliser la version de ruby que vous souhaitez sans problème.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haml on Rails</title>
      <link>http://www.zeneffy.fr/2011/07/haml-on-rails/</link>
      <pubDate>Tue, 12 Jul 2011 19:30:54 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/07/haml-on-rails/</guid>
      <description>&lt;p&gt;Pour utiliser &lt;a href=&#34;http://haml-lang.com/&#34;&gt;haml&lt;/a&gt; avec &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Ruby on Rails 3.x&lt;/a&gt;, il suffit d&amp;rsquo;ajouter dans le fichier &lt;code&gt;GemFile&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;haml-rails&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;puis lancer la commande &lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;et finalement ajouter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.generators do |g|
  g.template_engine :haml
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dans le fichier &lt;code&gt;config/application.rb&lt;/code&gt; (dans la classe &lt;code&gt;Application &amp;lt; Rails::Application&lt;/code&gt;) - chaque scaffold sera automatiquement en Haml&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js/Express sur heroku</title>
      <link>http://www.zeneffy.fr/2011/06/node-jsexpress-sur-heroku/</link>
      <pubDate>Mon, 27 Jun 2011 20:30:26 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/06/node-jsexpress-sur-heroku/</guid>
      <description>&lt;p&gt;Je suis en train de tester &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt; ces derniers jours, et notamment le &lt;a href=&#34;http://expressjs.com/&#34;&gt;framework web Express&lt;/a&gt; - Fan de l&amp;rsquo;hébergeur &lt;a href=&#34;http://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;, d&amp;rsquo;autant plus depuis qu&amp;rsquo;il est possible d&amp;rsquo;avoir des applications &lt;a href=&#34;http://blog.heroku.com/archives/2011/5/31/celadon_cedar/&#34;&gt;node.js&lt;/a&gt; (entre autres), j&amp;rsquo;ai souhaité installer une application de test en suivant &lt;a href=&#34;http://pcoding.blogspot.com/2011/06/hebergement-nodejs-avec-heroku-celadon.html&#34;&gt;ce tutorial&lt;/a&gt; - et tout n&amp;rsquo;a pas fonctionné du premier coup :(&lt;/p&gt;

&lt;p&gt;En effet, pour créer mon squelette d&amp;rsquo;application &amp;ldquo;zen-hw&amp;rdquo;, j&amp;rsquo;ai utilisé la commande&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[julien.newton: zen-hw]$ express
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;qui crée par défaut une arborescence d&amp;rsquo;application Express - or par défaut le fichier app.js lancera la webapp via la commande&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.listen(3000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;qui fonctionne parfaitement en local (sauf si &lt;a href=&#34;http://pow.cx/&#34;&gt;pow&lt;/a&gt; est installé, mais c&amp;rsquo;est une autre histoire) mais pas sur heroku, avec un beau crash de l&amp;rsquo;application visible via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[julien.newton: zen-hw]$ heroku ps
Process       State               Command
------------  ------------------  ------------------------------
web.1         crashed for 8s      node app.js 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour éviter ce point, il suffit de modifier app.js pour chaque application Express créée via la commande &lt;code&gt;_express_&lt;/code&gt; pour utiliser &lt;code&gt;_process.env.PORT_&lt;/code&gt;, ce qui donne à la fin du fichier:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var port = process.env.PORT || 3210;
app.listen(port, function(){
  console.log(&amp;quot;Listening on &amp;quot; + port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;et voilà l&amp;rsquo;application fonctionne sous heroku !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>npm, le gestionnaire de package de node.js</title>
      <link>http://www.zeneffy.fr/2011/06/npm-le-gestionnaire-de-package-de-node-js/</link>
      <pubDate>Sun, 19 Jun 2011 06:54:20 &#43;0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/06/npm-le-gestionnaire-de-package-de-node-js/</guid>
      <description>&lt;p&gt;Je suis en train de me documenter et de tester &lt;a href=&#34;http://nodejs.org&#34;&gt;node.js&lt;/a&gt;, un framework pour construire des applications réseaux (type serveur web, chat&amp;hellip;), basé d&amp;rsquo;une part sur le moteur &lt;a href=&#34;http://code.google.com/p/v8/&#34;&gt;javascript V8&lt;/a&gt; et conçu d&amp;rsquo;autre part pour être complètement asynchrone afin de gérer au mieux la concurrence.&lt;/p&gt;

&lt;p&gt;node.js bien que jeune a son propre gestionnaire de package &lt;a href=&#34;http://npmjs.org/&#34;&gt;npm&lt;/a&gt;, facile à installer et à utiliser. En bref ce qu&amp;rsquo;il faut retenir:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation de npm: &lt;code&gt;curl http://npmjs.org/install.sh | sh&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Installer un package en global (ne pas oublier le -g sinon le package s&amp;rsquo;installe dans le répertoire local: &lt;code&gt;npm install -g monpackage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Récupérer la liste des packages installés: &lt;code&gt;npm ls -g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mettre à jour tous les packages: &lt;code&gt;npm update&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour relier les packages dans une application node.js, il faut éditer le fichier &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;application-name&amp;quot;
  , &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;
  , &amp;quot;private&amp;quot;: true
  , &amp;quot;dependencies&amp;quot;: {
      &amp;quot;express&amp;quot;: &amp;quot;2.3.11&amp;quot;
    , &amp;quot;jade&amp;quot;: &amp;quot;0.12.2&amp;quot;
    , &amp;quot;less&amp;quot;: &amp;quot;1.1.2&amp;quot;
    , &amp;quot;mongoose&amp;quot;: &amp;quot;1.4.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;puis pour relier les packages au projet: &lt;code&gt;npm link&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>