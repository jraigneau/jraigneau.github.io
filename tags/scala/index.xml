<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Zeneffy : journal de bord</title>
    <link>http://www.zeneffy.fr/tags/scala/</link>
    <description>Recent content in Scala on Zeneffy : journal de bord</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Sun, 30 Oct 2011 09:37:51 +0000</lastBuildDate>
    <atom:link href="http://www.zeneffy.fr/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Démarrer avec Play! Framework, scala et MongoDB sur Heroku</title>
      <link>http://www.zeneffy.fr/2011/10/demarrer-avec-play-framework-scala-et-mongodb-sur-heroku/</link>
      <pubDate>Sun, 30 Oct 2011 09:37:51 +0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/10/demarrer-avec-play-framework-scala-et-mongodb-sur-heroku/</guid>
      <description>&lt;p&gt;J&amp;rsquo;ai découvert &lt;a href=&#34;http://www.playframework.org/&#34;&gt;Play! Framework&lt;/a&gt; il y a quelques mois avec beaucoup d&amp;rsquo;intérêt et je me suis rendu compte qu&amp;rsquo;un module &lt;a href=&#34;http://scala.playframework.org/&#34;&gt;scala&lt;/a&gt; existait. Voici donc un premier petit projet qui permet à la fois d&amp;rsquo;installer Play! (1.2.3) mais aussi d&amp;rsquo;utiliser MongoDB sur Heroku en quelques étapes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Suivant votre système, &lt;a href=&#34;http://www.playframework.org/download&#34;&gt;installez Play! via le zip&lt;/a&gt; ou via brew: &lt;code&gt;brew install play&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Installez le support java pour Play! &lt;code&gt;play install scala&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Créez l&amp;rsquo;application avec le support java: &lt;code&gt;play new maSuperDemo --with scala&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Testez que tout s&amp;rsquo;est bien passé: &lt;code&gt;play run&lt;/code&gt; puis ouvrez votre navigateur sur &lt;code&gt;http//localhost:9000&lt;/code&gt;. Normalement vous devez avoir une belle fenêtre résumant le fonctionnement de Play!. Passons maintenant au choses sérieuses.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Modifiez les dépendances du projet pour ajouter &lt;a href=&#34;http://api.mongodb.org/scala/casbah/2.1.5.0/index.html&#34;&gt;Casbah&lt;/a&gt;, la librairie Scala permettant de manipuler &lt;a href=&#34;mongodb&#34;&gt;MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Application dependencies
require:
    - play
    - play -&amp;gt; scala 0.9.1
    - com.mongodb.casbah -&amp;gt; casbah_2.8.1 2.1.5-1

repositories:
  - scalatools:
     type: iBiblio
     root: http://scala-tools.org/repo-releases/
     contains:
       - com.mongodb.casbah -&amp;gt; *
       - org.scalaj -&amp;gt; *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attention de bien utiliser la version 2.8.1 qui est la seule compatible avec Play! 1.2.3 à l&amp;rsquo;heure actuelle.&lt;/p&gt;

&lt;p&gt;Forcez Play! à charger toutes les dépendances (qui seront stockées dans le répertoire /lib):
    play dependencies&lt;/p&gt;

&lt;p&gt;Préparez l&amp;rsquo;application pour le déploiement sur heroku: pour des raisons de simplicité nous allons utiliser la base MongoDB de heroku directement (pas de base de développement&amp;hellip;c&amp;rsquo;est mal mais c&amp;rsquo;est une démo !).
Avant toute chose, créez un fichier &lt;code&gt;.gitignore&lt;/code&gt; contenant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/modules
/tmp
/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis la magie git habituelle&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;et enfin la déclaration sous heroku (je ne donne pas de nom à l&amp;rsquo;application, Heroku m&amp;rsquo;en choisira un tout seul) et l&amp;rsquo;installation de l&amp;rsquo;addon mongodb (ici via mongolab mais mongoHQ ferait aussi l&amp;rsquo;affaire)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku create --stack cedar
heroku addons:add mongolab:starter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Point important: la commande heroku config vous permettra de récupérer l&amp;rsquo;url et le port de la base mongoDB automatiquement créée. Exemple:
    &lt;code&gt;MONGOLAB_URI =&amp;gt; mongodb://nombase:motdepasse@urlmongolab:portmongolab/nombase&lt;/code&gt;
Ces données sont à intégrer dans la prochaine étape.&lt;/p&gt;

&lt;p&gt;Créez un nouveau controleur dans /app/controllers/Messages.scala avec le code suivant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package controllers;

import play.mvc._;
import com.mongodb.casbah.Imports._
import scala.collection.JavaConverters._

object Messages extends Controller {

//Création de la connexion et authentification
  val _mongoConn = MongoConnection(&amp;quot;urlmongolab&amp;quot;, portmongolab)
  _mongoConn(&amp;quot;nombase&amp;quot;).authenticate(&amp;quot;nombase&amp;quot;,&amp;quot;motdepasse&amp;quot;)


  def index = {
    val msgs = _mongoConn(&amp;quot;nombase&amp;quot;)(&amp;quot;test_data&amp;quot;).find( &amp;quot;msg&amp;quot; $exists true $ne &amp;quot;&amp;quot; )
    val msgStrings = msgs.map( (obj: DBObject) =&amp;gt; obj.getOrElse(&amp;quot;msg&amp;quot;,&amp;quot;&amp;quot;) )
    Template( &#39;msgStrings -&amp;gt; msgStrings.asJava )
  }

  def save(msg:String) = {
    val doc = MongoDBObject(&amp;quot;msg&amp;quot; -&amp;gt; msg)
    _mongoConn(&amp;quot;nombase&amp;quot;)(&amp;quot;test_data&amp;quot;).save( doc )
    Redirect(&amp;quot;/&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vous noterez les transformations des méthodes &amp;ldquo;.asJava&amp;rdquo; qui permettent à Groovy (le langage de scripting intégré dans Play) de gérer les listes typique de Scala.&lt;/p&gt;

&lt;p&gt;Ajoutez une vue pour gérer le controleur avec un fichier dans /app/views/Messages/index.html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;@{Messages.save()}&amp;quot; method=&amp;quot;POST&amp;quot;/&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;msg&amp;quot;/&amp;gt;
  &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Add message&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;ul&amp;gt;
  #{list items:msgStrings, as:&#39;mess&#39; }
  &amp;lt;li&amp;gt;${ mess }&amp;lt;/li&amp;gt;
  #{/list}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modifiez les routes dans /config/routes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                       Messages.index
POST    /                                       Messages.save


# Ignore favicon requests
GET     /favicon.ico                            404

# Map static resources from the /app/public folder to the /public path
GET     /public/                                staticDir:public

# Catch all
*       /{controller}/{action}                  {controller}.{action}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testez votre application en lançant la commande play run - normalement vous devriez être capable d&amp;rsquo;enregistrer des petites messages et de les voir apparaître à l&amp;rsquo;écran.&lt;/p&gt;

&lt;p&gt;Déployez votre application sur heroku et admirez la !&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;Premier commit&amp;quot;
git push heroku master
heroku open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ce petit tutoriel peut (doit) être complété avec le &lt;a href=&#34;http://scala.playframework.org/documentation/scala-0.9.1/home&#34;&gt;tutoriel officiel disponible sur le site de Play&lt;/a&gt;, en attendant vous pourrez jouer avec mon application sur &lt;a href=&#34;http://glowing-fog-2793.herokuapp.com/&#34;&gt;http://glowing-fog-2793.herokuapp.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tutoriel basé en partie sur &lt;a href=&#34;http://jaredrosoff.com/2011/05/getting-started-with-play-framework-scala-and-casbah/&#34;&gt;http://jaredrosoff.com/2011/05/getting-started-with-play-framework-scala-and-casbah/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scala sur Heroku</title>
      <link>http://www.zeneffy.fr/2011/10/scala-sur-heroku/</link>
      <pubDate>Sat, 15 Oct 2011 08:21:18 +0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/10/scala-sur-heroku/</guid>
      <description>&lt;p&gt;En plein apprentissage de scala, j&amp;rsquo;ai décidé de m&amp;rsquo;intéresser au framework web &lt;a href=&#34;http://www.scalatra.org/&#34;&gt;Scalatra&lt;/a&gt; qui ressemble à &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt;, mon environnement favori en Ruby. Evidemment, je souhaite pouvoir partager rapidement mes &amp;lsquo;créations&amp;rsquo; en les hébergeant sur la plate-forme &lt;a href=&#34;http://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;, devenue &lt;a href=&#34;http://blog.heroku.com/archives/2011/8/3/polyglot_platform/&#34;&gt;polyglotte&lt;/a&gt; depuis quelques semaines en supportant d&amp;rsquo;autres langages que Ruby (notamment node.js, Java, Clojure, Scala et Python).&lt;/p&gt;

&lt;p&gt;Après quelques recherches sur internet, j&amp;rsquo;ai trouvé mon bonheur sur github &lt;a href=&#34;https://gist.github.com/1209277&#34;&gt;ici&lt;/a&gt; et &lt;a href=&#34;https://github.com/mikkelbd/scalatra-hello-heroku&#34;&gt;là&lt;/a&gt;. Pour gagner du temps dans mes futurs projets, j&amp;rsquo;ai alors transformé ces informations en un template &lt;a href=&#34;https://github.com/n8han/giter8&#34;&gt;giter8&lt;/a&gt;. Giter8 est un simple outil basé sur scala et &lt;a href=&#34;https://github.com/harrah/xsbt/wiki&#34;&gt;SBT&lt;/a&gt; qui installe des templates stockés sur Github.&lt;/p&gt;

&lt;p&gt;Une fois &lt;a href=&#34;https://github.com/n8han/giter8&#34;&gt;g8&lt;/a&gt; et le &lt;a href=&#34;http://devcenter.heroku.com/articles/git&#34;&gt;gem heroku&lt;/a&gt; installés, mettre en ligne un projet scalatra devient alors très simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g8 jraigneau/scalatra-sbt-heroku.g8
cd monProjet
git init
git add . (conseil: pensez à mettre les répertoires de compilation (target) dans votre fichier .gitignore avant...)
git commit -m &amp;quot;Premier commit&amp;quot;
heroku create monProjet --stack cedar
git push heroku master
heroku open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et voilà, votre navigateur s&amp;rsquo;ouvre sur la nouvelle application !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>En avant pour Scala avec Vim</title>
      <link>http://www.zeneffy.fr/2011/10/en-avant-pour-scala-avec-vim/</link>
      <pubDate>Sun, 02 Oct 2011 10:31:59 +0000</pubDate>
      
      <guid>http://www.zeneffy.fr/2011/10/en-avant-pour-scala-avec-vim/</guid>
      <description>&lt;p&gt;Après quelques années de développement avec mes deux langages favoris &lt;a href=&#34;http://blog.zeneffy.fr/tag/python/&#34;&gt;Python&lt;/a&gt; et de &lt;a href=&#34;http://blog.zeneffy.fr/tag/ruby/&#34;&gt;Ruby&lt;/a&gt;, j&amp;rsquo;ai décidé de me lancer dans un nouveau langage basé sur la &lt;a href=&#34;http://fr.wikipedia.org/wiki/JVM_(informatique)&#34;&gt;JVM&lt;/a&gt; (donc pas de Java pur, j&amp;rsquo;ai déjà donné!). Après avoir étudié &lt;a href=&#34;http://clojure.org/&#34;&gt;Clojure&lt;/a&gt; et &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;, j&amp;rsquo;ai décidé de me concentrer sur Scala qui me semble plus naturel et qui mélange les paradigmes &amp;ldquo;Orienté-Objet&amp;rdquo; et &amp;ldquo;programmation fonctionnelle&amp;rdquo; - Clojure pour sa part est un &lt;a href=&#34;http://fr.wikipedia.org/wiki/Lisp&#34;&gt;lisp&lt;/a&gt; qui semble très puissant mais moins accessible pour un développeur moyen et dilettante comme moi.&lt;/p&gt;

&lt;p&gt;Mon premier réflexe a été bien évidemment de m&amp;rsquo;assurer que macVim me permettrait de facilement commencer quelques développement en Scala. En cherchant rapidement sur le web, j&amp;rsquo;ai pu trouvé quelques astuces pour la coloration, la navigation à travers les méthodes&amp;hellip;&lt;/p&gt;

&lt;p&gt;En premier lieu, il faut installer le plugin Scala pour vim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;svn export --force http://lampsvn.epfl.ch/svn-repos/scala/scala-tool-support/trunk/src/vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;puis copier les fichiers obtenus dans votre répertoire .vim&lt;/p&gt;

&lt;p&gt;Deuxième étape, l&amp;rsquo;installation du plugin &lt;a href=&#34;http://www.vim.org/scripts/script.php?script_id=3465&#34;&gt;Tagbar&lt;/a&gt; (téléchargement du fichier .vba puis méthode d&amp;rsquo;installation normale vim)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim tagbar.vba
  :so %
  :q
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TagBar ne prenant pas en compte Scala, il faut légèrement modifier certains fichiers
Tout d&amp;rsquo;abord, création dans votre $HOME du fichier .ctags suivant&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--langdef=Scala
--langmap=Scala:.scala
--regex-Scala=/^[ \t]*class[ \t]*([a-zA-Z0-9_]+)/\1/c,classes/
--regex-Scala=/^[ \t]*object[ \t]*([a-zA-Z0-9_]+)/\1/o,objects/
--regex-Scala=/^[ \t]*trait[ \t]*([a-zA-Z0-9_]+)/\1/t,traits/
--regex-Scala=/^[ \t]*case[ \t]*class[ \t]*([a-zA-Z0-9_]+)/\1/r,cclasses/
--regex-Scala=/^[ \t]*abstract[ \t]*class[ \t]*([a-zA-Z0-9_]+)/\1/a,aclasses/
--regex-Scala=/^[ \t]*def[ \t]*([a-zA-Z0-9_=]+)[ \t]*.*[:=]/\1/m,methods/
--regex-Scala=/[ \t]*val[ \t]*([a-zA-Z0-9_]+)[ \t]*[:=]/\1/V,values/
--regex-Scala=/[ \t]*var[ \t]*([a-zA-Z0-9_]+)[ \t]*[:=]/\1/v,variables/
--regex-Scala=/^[ \t]*type[ \t]*([a-zA-Z0-9_]+)[ \t]*[\[&amp;lt;&amp;gt;=]/\1/T,types/
--regex-Scala=/^[ \t]*import[ \t]*([a-zA-Z0-9_{}., \t=&amp;gt;]+$)/\1/i,includes/
--regex-Scala=/^[ \t]*package[ \t]*([a-zA-Z0-9_.]+$)/\1/p,packages/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis on va modifier le code du plugin TagBar (à priori dans &lt;code&gt;~/.vim/plugin/tagbar.vim&lt;/code&gt;), en rajoutant les lignes suivantes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; Scala {{{3
let type_scala = {}
let type_scala.ctagstype = &#39;Scala&#39;
let type_scala.kinds     = [
  \ {&#39;short&#39; : &#39;p&#39;, &#39;long&#39; : &#39;packages&#39;,  &#39;fold&#39; : 1 },
  \ {&#39;short&#39; : &#39;V&#39;, &#39;long&#39; : &#39;values&#39;,    &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;v&#39;, &#39;long&#39; : &#39;variables&#39;, &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;T&#39;, &#39;long&#39; : &#39;types&#39;,     &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;t&#39;, &#39;long&#39; : &#39;traits&#39;,    &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;o&#39;, &#39;long&#39; : &#39;objects&#39;,   &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;a&#39;, &#39;long&#39; : &#39;aclasses&#39;,  &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;c&#39;, &#39;long&#39; : &#39;classes&#39;,   &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;r&#39;, &#39;long&#39; : &#39;cclasses&#39;,  &#39;fold&#39; : 0 },
  \ {&#39;short&#39; : &#39;m&#39;, &#39;long&#39; : &#39;methods&#39;,   &#39;fold&#39; : 0 }
\ ]
let type_scala.sro        = &#39;.&#39;
let type_scala.kind2scope = {
  \ &#39;T&#39; : &#39;type&#39;,
  \ &#39;t&#39; : &#39;trait&#39;,
  \ &#39;o&#39; : &#39;object&#39;,
  \ &#39;a&#39; : &#39;abstract class&#39;,
  \ &#39;c&#39; : &#39;class&#39;,
  \ &#39;r&#39; : &#39;case class&#39;
\ }
let type_scala.scope2kind = {
  \ &#39;type&#39;           : &#39;T&#39;,
  \ &#39;trait&#39;          : &#39;t&#39;,
  \ &#39;object&#39;         : &#39;o&#39;,
  \ &#39;abstract class&#39; : &#39;a&#39;,
  \ &#39;class&#39;          : &#39;c&#39;,
  \ &#39;case class&#39;     : &#39;r&#39;
\ }
let s:known_types.scala = type_scala
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attention, ces lignes doivent être rajoutées dans la fonction &lt;code&gt;_function! s:InitTypes()_&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Et voilà - Vim est prêt pour Scala !&lt;/p&gt;

&lt;p&gt;Tiré/traduit de &lt;a href=&#34;http://latestbuild.net/scala-ctags-and-vim-tagbar&#34;&gt;latestbuild.net/scala-ctags-and-vim-tagbar &lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>